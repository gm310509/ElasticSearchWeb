# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.

#The follwing messages appear on the Index.jsp page.
# The title of the page (<title> tag)
indexTitle=Think Big Analytics Elastic Search
# The header of the page
indexPageHeader=Think Big Analytics - Elastic Search

# The prompt to the input field.
indexSearchPrompt=Search Text:
# The label on the submit button.
indexSubmitButtonLabel=Submit
indexHelpLinkText=Help

# A word that is used when the schema and/or the table name is unknown for some reason.
indexUnknownTableName=unknown
# Displayed under the table name in the search results showing how many matches were found for that table.
# The two variants are for the singular and multiple numbers of matches (e.g. 2 matches, 3 matches etc) and (1 match)
# The parameter is the number of matches, for "indexSingleMatchCount" the parameter should always be the value "1".
indexMatchCount={0} matches
indexSingleMatchCount={0} match
# Displayed id the search finds no results.
indexNoSearchResults=No results found.

# The column header for the score column.
indexResultTblHdrScore=Score


# A continuation message that should never appear.
# The parameter is the number of remaining matches for the current table.
indexTblContinues=Followed by {0} more matches.


# A summary message at the end of the search results.
# The first parameter {0} is the current page number.
# The second parameter {1} is the number of the first record displayed on the screen.
# The third parameter (2) is the number of the last record displayed on the screen.
# Example: if the number of records per page is 10 and we are looking at the second page
#          of results, then the formated message will be:
#              Page: 2: Showing matches 11 to 20.
indexSearchPaginationSummary=Page: {0}: Showing matches {1} to {2}.
# This message follows the pagination summary.
# The first paramter {0} is the total number of matches for the given search string (as reported by the elastic search server.
# The second parameter {1} it the total time (in ms) taken for elastic search to execute the requested search.
indexSearchHitCountSummary=Total {0} matches found in {1} ms.

# The text of a parameter passed to the function that generates the "SQL Popup page".
# The messages is the heading on that popup page.
# This message appears on the title bar of the popup window.
SQLWindowHeader=SQL Text
# The parameter is the table name: e.g. "SQL for: someschema.sometable".
indexSQLButtonHdr=SQL for: {0}
# The following message appears in the caption of the close button in the popup dialog showing the SQL
indexCloseWindow=Close




###############################
# Help page messages start here
helpTitle=Elastic Search Web Help
helpPageHeader=Elastic Search Web Help
helpBackToSearch=&lt;&lt; Back to search

helpBasicUsageHeader=Basic Usage
helpBasicUsageBody01=Enter a search string into the search box and hit enter.<br>\
If there are any matches, the results will be shown one page at a time.<br>\
Use the "next" and "previous" buttons to move from one page to another.

helpBasicUsageBody02=The results of your search are displayed one page at a time.<br>\
The format of the display is in a series of tables.<br>\
Each table is preceeded by the name of the object in which matches occurred. The body of the table contains the information associated with the records that match the search string. \
For example, the following table shows two records found in an object name mydb.mytbl. The search string might have been "trees" as this appears in both records.

helpBasicUsageBody03=When the SQL button is clicked, a popup window will appear containing an SQL statement. <br>\
The SQL text displayed in the popup window may be used to query a database to show:
 
helpBasicUsageLi01=Other attributes not shown in the search results (because they have not been indexed).
helpBasicUsageLi02=Other records that might have similar key values but do not match the search (you will most likely need to edit the query to remove some of the where clause conditions).


helpSearchStringsHeader=Search Strings
helpSearchBasicStringsHdr=Basic Search Strings
helpSearchBasicStringsBody01=The easiest way to use the search function is to enter a single word and click search. <br> \
The results of your search will be displayed for your review.
helpSearchBasicStringsBody02=When you enter a single word, the search engine will match that word exactly (but it will ignore upper and lower case differences). \
For example, if you enter the word "spring", then the following strings will be matched:
helpSearchBasicStringsExMatch01=spring
helpSearchBasicStringsExMatch02=Spring
helpSearchBasicStringsExMatch03=The four seasons are Summer, Autumn, Winter and Spring.
helpSearchBasicStringsExMatch04=In Spring time, the flowers are in bloom.
helpSearchBasicStringsExMatch05=The springs of the car provide a smooth ride.


helpSearchBasicStringsBody03=However, it does not return partial matches such as the following:
helpSearchBasicStringsExNoMatch01=Bruce Springsteen
helpSearchBasicStringsExNoMatch02=The mainspring is broken.

helpSearchBasicStringsBody04=It is possible to combine multiple search strings to narrow down (or expand) your search. \
The following sections provide a brief introduction to more sophisticated search strings.



helpSearchCompoundStringsHdr=Combining search strings
helpSearchCompoundStringsBody01=You may enter multiple words into the search box. If you do enter multiple words, the \
search engine will "or" them. That is, it will match records that contain any one or more of the words you enter.

helpSearchCompoundStringsBody02=For example, if you enter "barnes noble". Then the following will be matched (that matching text is shown highlighted):
helpSearchCompoundStringsExMatch01=<mark>Barnes</mark> and <mark>Noble</mark> is a book store.
helpSearchCompoundStringsExMatch02=A <mark>noble</mark> gas is one that ...
helpSearchCompoundStringsExMatch03=The Jimmy <mark>Barnes</mark> concert is next week.


helpSearchCompoundStringsBody03=Through the use of operators, you may combine search words in other ways. For example, \
instead of "OR'ing" the words, you can "AND" them. This means that instead of matching records that contain <strong>any</strong> of the \
entered words, <strong>all</strong> of the "AND'ed" words must be present in the record for a match to be returned.<br>\
For example if the words "Barnes Noble" were "AND'ed" together then only the first record would be matched.

helpSearchCompoundStringsBody04=The following list shows all of the ways in which individual words can be combined.

helpSearchQueryOperators=Query Operators
helpSearchQueryOperatorsAnd=AND: '+' specifies AND operation: token1+token2
helpSearchQueryOperatorsAndEx01=- Example "barnes + noble" - match records that contain both "barnes" and "noble".

helpSearchQueryOperatorsOr=OR: '|' specifies OR operation: token1|token2
helpSearchQueryOperatorsOrEx01=- Example "barnes | noble" - match records that contain either "barnes", "noble" or both.
helpSearchQueryOperatorsOrEx02=- The default combination is to "OR" the words together, so it is not strictly necessary to enter this between words. \
However, sometimes it is useful when entering more complex search strings so that it is clear what is required.

helpSearchQueryOperatorsNegate=Negate: '-' negates a single token: -token0
helpSearchQueryOperatorsNegateEx01=- Example "barnes + ~noble" - match records that contain "barnes" but not "noble"
helpSearchQueryOperatorsNegateEx02=- In the example above, this would only match the record "The Jimmy Barnes concert is next week."
helpSearchQueryOperatorsNegateEx03=- Note that is important to use the "AND" operator here, otherwise the match would be for any record that contains "barnes" or any record that does not contain "noble". \
This would be very likely to generate a very large result.

helpSearchQueryOperatorsPhrase=Phrase: use double quotes to create a phrases of terms: "term1 term2 ..."
helpSearchQueryOperatorsPhraseEx01=- to specify an exact phrase, simply enter your phrase in double quotation marks.
helpSearchQueryOperatorsPhraseEx02=- For example, "Bank of America".

helpSearchQueryOperatorsWildCard=Wild Card: '*' at the end of terms specifies prefix query: term*
helpSearchQueryOperatorsWildCardEx01=- To match words that start with a search word, enter the word followed by an asterisk.
helpSearchQueryOperatorsWildCardEx02=- For example "Spring*" will match "Spring" and "Springsteen".
helpSearchQueryOperatorsWildCardEx03=- However, the "*" wildcard only works at the end of a search word.
helpSearchQueryOperatorsWildCardEx04=- For example: "*spring" does not match "offspring".


helpSearchQueryOperatorsFuzzy=Fuzzy: '~N' at the end of a word specifies a fuzzy query: term~1
helpSearchQueryOperatorsFuzzyEx01=- Applies a fuzzy match of the search word to the indexed records.
helpSearchQueryOperatorsFuzzyEx02=- For example "awake~2" might match "Cake", "Blake", "Stake" and "Baked" to mention just a few.

helpSearchQueryOperatorsNear=Near: '~N' at the end of a phrase specifies a near query: "term1 term2"~5
helpSearchQueryOperatorsNearEx01=- Specifies that the search words must occur near each other. Near is defined by the number following the ~ character.
helpSearchQueryOperatorsNearEx02=- For example "bank stadium"~2 will match "M&T Bank Stadium" and "Bank of America Stadium". However, "bank stadium"~1 will only match "M&T Bank Stadium".

helpSearchQueryOperatorsPrecedence=Precedence: '(' and ')' specifies precedence: token1 + (token2 | token3)
helpSearchQueryOperatorsPrecedenceEx01=- Normally operators are evaluated from left to right. However brackets can be used to change the order.
helpSearchQueryOperatorsPrecedenceEx02=- for example a + b | c means match anything that contains both a and b or anything containing c (but not necessarily a).
helpSearchQueryOperatorsPrecedenceEx03=- whereas a + (b | c) means match anything that contains both either a and b or a and c. This may be read as matching anything that contains "a" along with either a "b" or "c".

helpSearchQueryOperatorsDefault=The default operator is OR if no other operator is specified. For example, the following will OR token1 and token2 together: token1 token2 \
Normal operator precedence will be simple order from right to left. For example, the following will evaluate token1 OR token2 first, then AND with token3: \
token1 | token2 + token3


#Escaping
#An individual term may contain any possible character with certain characters requiring escaping using a '\'. The following characters will need to be escaped in terms and phrases: + | " ( ) ' \
#The '-' operator is a special case. On individual terms (not phrases) the first character of a term that is - must be escaped; however, any '-' characters beyond the first character do not need to be escaped. For example:
#-term1 -- Specifies NOT operation against term1
#\-term1 -- Searches for the term -term1.
#term-1 -- Searches for the term term-1.
#term\-1 -- Searches for the term term-1.
#The '*' operator is a special case. On individual terms (not phrases) the last character of a term that is '*' must be escaped; however, any '*' characters before the last character do not need to be escaped:
#term1* -- Searches for the prefix term1
#term1\* -- Searches for the term term1*
#term*1 -- Searches for the term term*1
#term\*1 -- Searches for the term term*1
#Note that above examples consider the terms before text processing.